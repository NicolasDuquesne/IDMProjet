/*
 * generated by Xtext
 */
grammar InternalVideoGen;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package istic.idm.project.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package istic.idm.project.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import istic.idm.project.services.VideoGenGrammarAccess;

}

@parser::members {
 
 	private VideoGenGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(VideoGenGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleVideoGen
entryRuleVideoGen 
:
{ before(grammarAccess.getVideoGenRule()); }
	 ruleVideoGen
{ after(grammarAccess.getVideoGenRule()); } 
	 EOF 
;

// Rule VideoGen
ruleVideoGen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVideoGenAccess().getGroup()); }
(rule__VideoGen__Group__0)
{ after(grammarAccess.getVideoGenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletype
entryRuletype 
:
{ before(grammarAccess.getTypeRule()); }
	 ruletype
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule type
ruletype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemandatory
entryRulemandatory 
:
{ before(grammarAccess.getMandatoryRule()); }
	 rulemandatory
{ after(grammarAccess.getMandatoryRule()); } 
	 EOF 
;

// Rule mandatory
rulemandatory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMandatoryAccess().getGroup()); }
(rule__Mandatory__Group__0)
{ after(grammarAccess.getMandatoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleoptional
entryRuleoptional 
:
{ before(grammarAccess.getOptionalRule()); }
	 ruleoptional
{ after(grammarAccess.getOptionalRule()); } 
	 EOF 
;

// Rule optional
ruleoptional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalAccess().getGroup()); }
(rule__Optional__Group__0)
{ after(grammarAccess.getOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulealternatives
entryRulealternatives 
:
{ before(grammarAccess.getAlternativesRule()); }
	 rulealternatives
{ after(grammarAccess.getAlternativesRule()); } 
	 EOF 
;

// Rule alternatives
rulealternatives
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativesAccess().getGroup()); }
(rule__Alternatives__Group__0)
{ after(grammarAccess.getAlternativesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevideoseq
entryRulevideoseq 
:
{ before(grammarAccess.getVideoseqRule()); }
	 rulevideoseq
{ after(grammarAccess.getVideoseqRule()); } 
	 EOF 
;

// Rule videoseq
rulevideoseq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVideoseqAccess().getGroup()); }
(rule__Videoseq__Group__0)
{ after(grammarAccess.getVideoseqAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMandatoryParserRuleCall_0()); }
	rulemandatory
{ after(grammarAccess.getTypeAccess().getMandatoryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getOptionalParserRuleCall_1()); }
	ruleoptional
{ after(grammarAccess.getTypeAccess().getOptionalParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getAlternativesParserRuleCall_2()); }
	rulealternatives
{ after(grammarAccess.getTypeAccess().getAlternativesParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__VideoGen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__0__Impl
	rule__VideoGen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getVideoGenKeyword_0()); }

	'VideoGen {' 

{ after(grammarAccess.getVideoGenAccess().getVideoGenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoGen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__1__Impl
	rule__VideoGen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getTypeAssignment_1()); }
(rule__VideoGen__TypeAssignment_1)*
{ after(grammarAccess.getVideoGenAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VideoGen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VideoGen__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VideoGen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Mandatory__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__0__Impl
	rule__Mandatory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }

	'mandatory' 

{ after(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getVideoseqParserRuleCall_1()); }
	rulevideoseq
{ after(grammarAccess.getMandatoryAccess().getVideoseqParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__0__Impl
	rule__Optional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getOptionalKeyword_0()); }

	'optional' 

{ after(grammarAccess.getOptionalAccess().getOptionalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getVideoseqParserRuleCall_1()); }
	rulevideoseq
{ after(grammarAccess.getOptionalAccess().getVideoseqParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alternatives__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__0__Impl
	rule__Alternatives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getAlternativesKeyword_0()); }

	'alternatives' 

{ after(grammarAccess.getAlternativesAccess().getAlternativesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__1__Impl
	rule__Alternatives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getIdAssignment_1()); }
(rule__Alternatives__IdAssignment_1)
{ after(grammarAccess.getAlternativesAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__2__Impl
	rule__Alternatives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAlternativesAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__3__Impl
	rule__Alternatives__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAlternativesAccess().getVideoseqAssignment_3()); }
(rule__Alternatives__VideoseqAssignment_3)
{ after(grammarAccess.getAlternativesAccess().getVideoseqAssignment_3()); }
)
(
{ before(grammarAccess.getAlternativesAccess().getVideoseqAssignment_3()); }
(rule__Alternatives__VideoseqAssignment_3)*
{ after(grammarAccess.getAlternativesAccess().getVideoseqAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternatives__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternatives__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAlternativesAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Videoseq__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Videoseq__Group__0__Impl
	rule__Videoseq__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Videoseq__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoseqAccess().getVideoseqKeyword_0()); }

	'videoseq' 

{ after(grammarAccess.getVideoseqAccess().getVideoseqKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Videoseq__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Videoseq__Group__1__Impl
	rule__Videoseq__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Videoseq__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoseqAccess().getIdAssignment_1()); }
(rule__Videoseq__IdAssignment_1)?
{ after(grammarAccess.getVideoseqAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Videoseq__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Videoseq__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Videoseq__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoseqAccess().getTextAssignment_2()); }
(rule__Videoseq__TextAssignment_2)
{ after(grammarAccess.getVideoseqAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__VideoGen__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoGenAccess().getTypeTypeParserRuleCall_1_0()); }
	ruletype{ after(grammarAccess.getVideoGenAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAlternativesAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternatives__VideoseqAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativesAccess().getVideoseqVideoseqParserRuleCall_3_0()); }
	rulevideoseq{ after(grammarAccess.getAlternativesAccess().getVideoseqVideoseqParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Videoseq__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoseqAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVideoseqAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Videoseq__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVideoseqAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getVideoseqAccess().getTextSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


